package training.dsa;
import java.util.Scanner;

public class TicTacToe {	    
	    // Declare a 3x3 grid for the Tic Tac Toe board
	    private static char[][] board = new char[3][3];
	    private static char currentPlayer = 'X';  // Player 1 starts with 'X'
	    
	    // Method to initialize the board with empty spaces
	    public static void initializeBoard() {
	        for (int i = 0; i < 3; i++) {
	            for (int j = 0; j < 3; j++) {
	                board[i][j] = ' ';  // Empty space represented by ' '
	            }
	        }
	    }
	    
	    // Method to display the board
	    public static void displayBoard() {
	        System.out.println("-------------");
	        for (int i = 0; i < 3; i++) {
	            System.out.print("| ");
	            for (int j = 0; j < 3; j++) {
	                System.out.print(board[i][j] + " | ");
	            }
	            System.out.println("\n-------------");
	        }
	    }
	    
	    // Method to check if a player has won
	    public static boolean checkWin() {
	        // Check rows
	        for (int i = 0; i < 3; i++) {
	            if (board[i][0] == currentPlayer && board[i][1] == currentPlayer && board[i][2] == currentPlayer) {
	                return true;
	            }
	        }
	        // Check columns
	        for (int j = 0; j < 3; j++) {
	            if (board[0][j] == currentPlayer && board[1][j] == currentPlayer && board[2][j] == currentPlayer) {
	                return true;
	            }
	        }
	        // Check diagonals
	        if (board[0][0] == currentPlayer && board[1][1] == currentPlayer && board[2][2] == currentPlayer) {
	            return true;
	        }
	        if (board[0][2] == currentPlayer && board[1][1] == currentPlayer && board[2][0] == currentPlayer) {
	            return true;
	        }
	        
	        return false;
	    }
	    
	    // Method to check if the board is full (draw condition)
	    public static boolean checkDraw() {
	        for (int i = 0; i < 3; i++) {
	            for (int j = 0; j < 3; j++) {
	                if (board[i][j] == ' ') {
	                    return false;  // If there's still an empty space, it's not a draw
	                }
	            }
	        }
	        return true;  // If all spots are filled, it's a draw
	    }
	    
	    // Method to switch player turn
	    public static void switchPlayer() {
	        if (currentPlayer == 'X') {
	            currentPlayer = 'O';
	        } else {
	            currentPlayer = 'X';
	        }
	    }
	    
	    // Method to handle player input
	    public static void playerMove() {
	        Scanner scanner = new Scanner(System.in);
	        int row, col;
	        
	        while (true) {
	            System.out.println("Player " + currentPlayer + "'s turn");
	            System.out.print("Enter row (1-3): ");
	            row = scanner.nextInt() - 1;  // Subtract 1 for 0-based index
	            System.out.print("Enter column (1-3): ");
	            col = scanner.nextInt() - 1;  // Subtract 1 for 0-based index
	            
	            // Check if the move is valid
	            if (row >= 0 && row < 3 && col >= 0 && col < 3 && board[row][col] == ' ') {
	                board[row][col] = currentPlayer;
	                break;
	            } else {
	                System.out.println("Invalid move, try again.");
	            }
	        }
	    }
	    
	    public static void main(String[] args) {
	        initializeBoard();
	        
	        while (true) {
	            displayBoard();
	            playerMove();
	            
	            // Check for win
	            if (checkWin()) {
	                displayBoard();
	                System.out.println("Player " + currentPlayer + " wins!");
	                break;
	            }
	            
	            // Check for draw
	            if (checkDraw()) {
	                displayBoard();
	                System.out.println("It's a draw!");
	                break;
	            }
	            
	            // Switch player for the next turn
	            switchPlayer();
	     }
	 }
}
